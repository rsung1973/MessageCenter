#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebHome.Models.DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MessageCenter")]
	public partial class MessageCenterDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDeviceCommand(DeviceCommand instance);
    partial void UpdateDeviceCommand(DeviceCommand instance);
    partial void DeleteDeviceCommand(DeviceCommand instance);
    partial void InsertUserRegister(UserRegister instance);
    partial void UpdateUserRegister(UserRegister instance);
    partial void DeleteUserRegister(UserRegister instance);
    partial void InsertDeviceEventLog(DeviceEventLog instance);
    partial void UpdateDeviceEventLog(DeviceEventLog instance);
    partial void DeleteDeviceEventLog(DeviceEventLog instance);
    partial void InsertDeviceEventReport(DeviceEventReport instance);
    partial void UpdateDeviceEventReport(DeviceEventReport instance);
    partial void DeleteDeviceEventReport(DeviceEventReport instance);
    partial void InsertLevelExpression(LevelExpression instance);
    partial void UpdateLevelExpression(LevelExpression instance);
    partial void DeleteLevelExpression(LevelExpression instance);
    partial void InsertLiveDevice(LiveDevice instance);
    partial void UpdateLiveDevice(LiveDevice instance);
    partial void DeleteLiveDevice(LiveDevice instance);
    partial void InsertUserFCM(UserFCM instance);
    partial void UpdateUserFCM(UserFCM instance);
    partial void DeleteUserFCM(UserFCM instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertUserBinding(UserBinding instance);
    partial void UpdateUserBinding(UserBinding instance);
    partial void DeleteUserBinding(UserBinding instance);
    partial void InsertCommunity(Community instance);
    partial void UpdateCommunity(Community instance);
    partial void DeleteCommunity(Community instance);
    partial void InsertUserProfileExtension(UserProfileExtension instance);
    partial void UpdateUserProfileExtension(UserProfileExtension instance);
    partial void DeleteUserProfileExtension(UserProfileExtension instance);
    partial void InsertMessageBoard(MessageBoard instance);
    partial void UpdateMessageBoard(MessageBoard instance);
    partial void DeleteMessageBoard(MessageBoard instance);
    partial void InsertGasUsageReport(GasUsageReport instance);
    partial void UpdateGasUsageReport(GasUsageReport instance);
    partial void DeleteGasUsageReport(GasUsageReport instance);
    partial void InsertFCMToken(FCMToken instance);
    partial void UpdateFCMToken(FCMToken instance);
    partial void DeleteFCMToken(FCMToken instance);
    partial void InsertUserAccessCard(UserAccessCard instance);
    partial void UpdateUserAccessCard(UserAccessCard instance);
    partial void DeleteUserAccessCard(UserAccessCard instance);
    partial void InsertBoxStorageLog(BoxStorageLog instance);
    partial void UpdateBoxStorageLog(BoxStorageLog instance);
    partial void DeleteBoxStorageLog(BoxStorageLog instance);
    partial void InsertUserAlarm(UserAlarm instance);
    partial void UpdateUserAlarm(UserAlarm instance);
    partial void DeleteUserAlarm(UserAlarm instance);
    #endregion
		
		public MessageCenterDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MessageCenterConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MessageCenterDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessageCenterDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessageCenterDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessageCenterDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DeviceCommand> DeviceCommand
		{
			get
			{
				return this.GetTable<DeviceCommand>();
			}
		}
		
		public System.Data.Linq.Table<UserRegister> UserRegister
		{
			get
			{
				return this.GetTable<UserRegister>();
			}
		}
		
		public System.Data.Linq.Table<DeviceEventLog> DeviceEventLog
		{
			get
			{
				return this.GetTable<DeviceEventLog>();
			}
		}
		
		public System.Data.Linq.Table<DeviceEventReport> DeviceEventReport
		{
			get
			{
				return this.GetTable<DeviceEventReport>();
			}
		}
		
		public System.Data.Linq.Table<LevelExpression> LevelExpression
		{
			get
			{
				return this.GetTable<LevelExpression>();
			}
		}
		
		public System.Data.Linq.Table<LiveDevice> LiveDevice
		{
			get
			{
				return this.GetTable<LiveDevice>();
			}
		}
		
		public System.Data.Linq.Table<UserFCM> UserFCM
		{
			get
			{
				return this.GetTable<UserFCM>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfile
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<UserBinding> UserBinding
		{
			get
			{
				return this.GetTable<UserBinding>();
			}
		}
		
		public System.Data.Linq.Table<Community> Community
		{
			get
			{
				return this.GetTable<Community>();
			}
		}
		
		public System.Data.Linq.Table<UserProfileExtension> UserProfileExtension
		{
			get
			{
				return this.GetTable<UserProfileExtension>();
			}
		}
		
		public System.Data.Linq.Table<MessageBoard> MessageBoard
		{
			get
			{
				return this.GetTable<MessageBoard>();
			}
		}
		
		public System.Data.Linq.Table<GasUsageReport> GasUsageReport
		{
			get
			{
				return this.GetTable<GasUsageReport>();
			}
		}
		
		public System.Data.Linq.Table<FCMToken> FCMToken
		{
			get
			{
				return this.GetTable<FCMToken>();
			}
		}
		
		public System.Data.Linq.Table<UserAccessCard> UserAccessCard
		{
			get
			{
				return this.GetTable<UserAccessCard>();
			}
		}
		
		public System.Data.Linq.Table<BoxStorageLog> BoxStorageLog
		{
			get
			{
				return this.GetTable<BoxStorageLog>();
			}
		}
		
		public System.Data.Linq.Table<UserAlarm> UserAlarm
		{
			get
			{
				return this.GetTable<UserAlarm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceCommand")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DeviceCommand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private int _CommandID;
		
		private string _TokenID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnCommandIDChanging(int value);
    partial void OnCommandIDChanged();
    partial void OnTokenIDChanging(string value);
    partial void OnTokenIDChanged();
    #endregion
		
		public DeviceCommand()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenID", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string TokenID
		{
			get
			{
				return this._TokenID;
			}
			set
			{
				if ((this._TokenID != value))
				{
					this.OnTokenIDChanging(value);
					this.SendPropertyChanging();
					this._TokenID = value;
					this.SendPropertyChanged("TokenID");
					this.OnTokenIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRegister")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserRegister : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _DeviceUri;
		
		private EntitySet<LiveDevice> _LiveDevice;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnDeviceUriChanging(string value);
    partial void OnDeviceUriChanged();
    #endregion
		
		public UserRegister()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceUri", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string DeviceUri
		{
			get
			{
				return this._DeviceUri;
			}
			set
			{
				if ((this._DeviceUri != value))
				{
					this.OnDeviceUriChanging(value);
					this.SendPropertyChanging();
					this._DeviceUri = value;
					this.SendPropertyChanged("DeviceUri");
					this.OnDeviceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegister_LiveDevice", Storage="_LiveDevice", ThisKey="UID", OtherKey="UID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<LiveDevice> LiveDevice
		{
			get
			{
				if ((this.serializing 
							&& (this._LiveDevice.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LiveDevice;
			}
			set
			{
				this._LiveDevice.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserRegister", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserRegister = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserRegister = this;
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LiveDevice(LiveDevice entity)
		{
			this.SendPropertyChanging();
			entity.UserRegister = this;
		}
		
		private void detach_LiveDevice(LiveDevice entity)
		{
			this.SendPropertyChanging();
			entity.UserRegister = null;
		}
		
		private void Initialize()
		{
			this._LiveDevice = new EntitySet<LiveDevice>(new Action<LiveDevice>(this.attach_LiveDevice), new Action<LiveDevice>(this.detach_LiveDevice));
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceEventLog")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DeviceEventLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private System.Nullable<System.DateTime> _LogDate;
		
		private string _EventCode;
		
		private string _Tx;
		
		private string _Rx;
		
		private System.Nullable<int> _LiveID;
		
		private EntitySet<DeviceEventReport> _DeviceEventReport;
		
		private EntityRef<LiveDevice> _LiveDevice;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnLogDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLogDateChanged();
    partial void OnEventCodeChanging(string value);
    partial void OnEventCodeChanged();
    partial void OnTxChanging(string value);
    partial void OnTxChanged();
    partial void OnRxChanging(string value);
    partial void OnRxChanged();
    partial void OnLiveIDChanging(System.Nullable<int> value);
    partial void OnLiveIDChanged();
    #endregion
		
		public DeviceEventLog()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Nullable<System.DateTime> LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCode", DbType="NVarChar(16)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tx", DbType="NVarChar(256)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Tx
		{
			get
			{
				return this._Tx;
			}
			set
			{
				if ((this._Tx != value))
				{
					this.OnTxChanging(value);
					this.SendPropertyChanging();
					this._Tx = value;
					this.SendPropertyChanged("Tx");
					this.OnTxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rx", DbType="NVarChar(256)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Rx
		{
			get
			{
				return this._Rx;
			}
			set
			{
				if ((this._Rx != value))
				{
					this.OnRxChanging(value);
					this.SendPropertyChanging();
					this._Rx = value;
					this.SendPropertyChanged("Rx");
					this.OnRxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<int> LiveID
		{
			get
			{
				return this._LiveID;
			}
			set
			{
				if ((this._LiveID != value))
				{
					if (this._LiveDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLiveIDChanging(value);
					this.SendPropertyChanging();
					this._LiveID = value;
					this.SendPropertyChanged("LiveID");
					this.OnLiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceEventLog_DeviceEventReport", Storage="_DeviceEventReport", ThisKey="LogID", OtherKey="LogID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<DeviceEventReport> DeviceEventReport
		{
			get
			{
				if ((this.serializing 
							&& (this._DeviceEventReport.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DeviceEventReport;
			}
			set
			{
				this._DeviceEventReport.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveDevice_DeviceEventLog", Storage="_LiveDevice", ThisKey="LiveID", OtherKey="LiveID", IsForeignKey=true, DeleteRule="CASCADE")]
		public LiveDevice LiveDevice
		{
			get
			{
				return this._LiveDevice.Entity;
			}
			set
			{
				LiveDevice previousValue = this._LiveDevice.Entity;
				if (((previousValue != value) 
							|| (this._LiveDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiveDevice.Entity = null;
						previousValue.DeviceEventLog.Remove(this);
					}
					this._LiveDevice.Entity = value;
					if ((value != null))
					{
						value.DeviceEventLog.Add(this);
						this._LiveID = value.LiveID;
					}
					else
					{
						this._LiveID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LiveDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceEventReport(DeviceEventReport entity)
		{
			this.SendPropertyChanging();
			entity.DeviceEventLog = this;
		}
		
		private void detach_DeviceEventReport(DeviceEventReport entity)
		{
			this.SendPropertyChanging();
			entity.DeviceEventLog = null;
		}
		
		private void Initialize()
		{
			this._DeviceEventReport = new EntitySet<DeviceEventReport>(new Action<DeviceEventReport>(this.attach_DeviceEventReport), new Action<DeviceEventReport>(this.detach_DeviceEventReport));
			this._LiveDevice = default(EntityRef<LiveDevice>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceEventReport")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DeviceEventReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportID;
		
		private int _LevelID;
		
		private System.Nullable<System.DateTime> _ReportDate;
		
		private System.Nullable<int> _LogID;
		
		private int _LiveID;
		
		private EntityRef<DeviceEventLog> _DeviceEventLog;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
		private EntityRef<LiveDevice> _LiveDevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnLevelIDChanging(int value);
    partial void OnLevelIDChanged();
    partial void OnReportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReportDateChanged();
    partial void OnLogIDChanging(System.Nullable<int> value);
    partial void OnLogIDChanged();
    partial void OnLiveIDChanging(int value);
    partial void OnLiveIDChanged();
    #endregion
		
		public DeviceEventReport()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Nullable<System.DateTime> ReportDate
		{
			get
			{
				return this._ReportDate;
			}
			set
			{
				if ((this._ReportDate != value))
				{
					this.OnReportDateChanging(value);
					this.SendPropertyChanging();
					this._ReportDate = value;
					this.SendPropertyChanged("ReportDate");
					this.OnReportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					if (this._DeviceEventLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public int LiveID
		{
			get
			{
				return this._LiveID;
			}
			set
			{
				if ((this._LiveID != value))
				{
					if (this._LiveDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLiveIDChanging(value);
					this.SendPropertyChanging();
					this._LiveID = value;
					this.SendPropertyChanged("LiveID");
					this.OnLiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceEventLog_DeviceEventReport", Storage="_DeviceEventLog", ThisKey="LogID", OtherKey="LogID", IsForeignKey=true, DeleteRule="CASCADE")]
		public DeviceEventLog DeviceEventLog
		{
			get
			{
				return this._DeviceEventLog.Entity;
			}
			set
			{
				DeviceEventLog previousValue = this._DeviceEventLog.Entity;
				if (((previousValue != value) 
							|| (this._DeviceEventLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceEventLog.Entity = null;
						previousValue.DeviceEventReport.Remove(this);
					}
					this._DeviceEventLog.Entity = value;
					if ((value != null))
					{
						value.DeviceEventReport.Add(this);
						this._LogID = value.LogID;
					}
					else
					{
						this._LogID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeviceEventLog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_DeviceEventReport", Storage="_LevelExpression", ThisKey="LevelID", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.DeviceEventReport.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.DeviceEventReport.Add(this);
						this._LevelID = value.LevelID;
					}
					else
					{
						this._LevelID = default(int);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveDevice_DeviceEventReport", Storage="_LiveDevice", ThisKey="LiveID", OtherKey="LiveID", IsForeignKey=true)]
		public LiveDevice LiveDevice
		{
			get
			{
				return this._LiveDevice.Entity;
			}
			set
			{
				LiveDevice previousValue = this._LiveDevice.Entity;
				if (((previousValue != value) 
							|| (this._LiveDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiveDevice.Entity = null;
						previousValue.DeviceEventReport.Remove(this);
					}
					this._LiveDevice.Entity = value;
					if ((value != null))
					{
						value.DeviceEventReport.Add(this);
						this._LiveID = value.LiveID;
					}
					else
					{
						this._LiveID = default(int);
					}
					this.SendPropertyChanged("LiveDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._DeviceEventLog = default(EntityRef<DeviceEventLog>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			this._LiveDevice = default(EntityRef<LiveDevice>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LevelExpression")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class LevelExpression : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelID;
		
		private string _Expression;
		
		private string _Description;
		
		private EntitySet<DeviceEventReport> _DeviceEventReport;
		
		private EntitySet<LiveDevice> _LiveDevice;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIDChanging(int value);
    partial void OnLevelIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public LevelExpression()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expression", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_DeviceEventReport", Storage="_DeviceEventReport", ThisKey="LevelID", OtherKey="LevelID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<DeviceEventReport> DeviceEventReport
		{
			get
			{
				if ((this.serializing 
							&& (this._DeviceEventReport.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DeviceEventReport;
			}
			set
			{
				this._DeviceEventReport.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_LiveDevice", Storage="_LiveDevice", ThisKey="LevelID", OtherKey="CurrentLevel")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<LiveDevice> LiveDevice
		{
			get
			{
				if ((this.serializing 
							&& (this._LiveDevice.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LiveDevice;
			}
			set
			{
				this._LiveDevice.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceEventReport(DeviceEventReport entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_DeviceEventReport(DeviceEventReport entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_LiveDevice(LiveDevice entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_LiveDevice(LiveDevice entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void Initialize()
		{
			this._DeviceEventReport = new EntitySet<DeviceEventReport>(new Action<DeviceEventReport>(this.attach_DeviceEventReport), new Action<DeviceEventReport>(this.detach_DeviceEventReport));
			this._LiveDevice = new EntitySet<LiveDevice>(new Action<LiveDevice>(this.attach_LiveDevice), new Action<LiveDevice>(this.detach_LiveDevice));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LiveDevice")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class LiveDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LiveID;
		
		private int _DeviceID;
		
		private string _DeviceUri;
		
		private System.Nullable<int> _CurrentLevel;
		
		private System.Nullable<int> _UID;
		
		private EntitySet<DeviceEventLog> _DeviceEventLog;
		
		private EntitySet<DeviceEventReport> _DeviceEventReport;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
		private EntityRef<UserRegister> _UserRegister;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLiveIDChanging(int value);
    partial void OnLiveIDChanged();
    partial void OnDeviceIDChanging(int value);
    partial void OnDeviceIDChanged();
    partial void OnDeviceUriChanging(string value);
    partial void OnDeviceUriChanged();
    partial void OnCurrentLevelChanging(System.Nullable<int> value);
    partial void OnCurrentLevelChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    #endregion
		
		public LiveDevice()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int LiveID
		{
			get
			{
				return this._LiveID;
			}
			set
			{
				if ((this._LiveID != value))
				{
					this.OnLiveIDChanging(value);
					this.SendPropertyChanging();
					this._LiveID = value;
					this.SendPropertyChanged("LiveID");
					this.OnLiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceUri", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string DeviceUri
		{
			get
			{
				return this._DeviceUri;
			}
			set
			{
				if ((this._DeviceUri != value))
				{
					this.OnDeviceUriChanging(value);
					this.SendPropertyChanging();
					this._DeviceUri = value;
					this.SendPropertyChanged("DeviceUri");
					this.OnDeviceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentLevel", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> CurrentLevel
		{
			get
			{
				return this._CurrentLevel;
			}
			set
			{
				if ((this._CurrentLevel != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentLevelChanging(value);
					this.SendPropertyChanging();
					this._CurrentLevel = value;
					this.SendPropertyChanged("CurrentLevel");
					this.OnCurrentLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserRegister.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveDevice_DeviceEventLog", Storage="_DeviceEventLog", ThisKey="LiveID", OtherKey="LiveID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<DeviceEventLog> DeviceEventLog
		{
			get
			{
				if ((this.serializing 
							&& (this._DeviceEventLog.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DeviceEventLog;
			}
			set
			{
				this._DeviceEventLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LiveDevice_DeviceEventReport", Storage="_DeviceEventReport", ThisKey="LiveID", OtherKey="LiveID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<DeviceEventReport> DeviceEventReport
		{
			get
			{
				if ((this.serializing 
							&& (this._DeviceEventReport.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DeviceEventReport;
			}
			set
			{
				this._DeviceEventReport.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_LiveDevice", Storage="_LevelExpression", ThisKey="CurrentLevel", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.LiveDevice.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.LiveDevice.Add(this);
						this._CurrentLevel = value.LevelID;
					}
					else
					{
						this._CurrentLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegister_LiveDevice", Storage="_UserRegister", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public UserRegister UserRegister
		{
			get
			{
				return this._UserRegister.Entity;
			}
			set
			{
				UserRegister previousValue = this._UserRegister.Entity;
				if (((previousValue != value) 
							|| (this._UserRegister.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegister.Entity = null;
						previousValue.LiveDevice.Remove(this);
					}
					this._UserRegister.Entity = value;
					if ((value != null))
					{
						value.LiveDevice.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserRegister");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceEventLog(DeviceEventLog entity)
		{
			this.SendPropertyChanging();
			entity.LiveDevice = this;
		}
		
		private void detach_DeviceEventLog(DeviceEventLog entity)
		{
			this.SendPropertyChanging();
			entity.LiveDevice = null;
		}
		
		private void attach_DeviceEventReport(DeviceEventReport entity)
		{
			this.SendPropertyChanging();
			entity.LiveDevice = this;
		}
		
		private void detach_DeviceEventReport(DeviceEventReport entity)
		{
			this.SendPropertyChanging();
			entity.LiveDevice = null;
		}
		
		private void Initialize()
		{
			this._DeviceEventLog = new EntitySet<DeviceEventLog>(new Action<DeviceEventLog>(this.attach_DeviceEventLog), new Action<DeviceEventLog>(this.detach_DeviceEventLog));
			this._DeviceEventReport = new EntitySet<DeviceEventReport>(new Action<DeviceEventReport>(this.attach_DeviceEventReport), new Action<DeviceEventReport>(this.detach_DeviceEventReport));
			this._LevelExpression = default(EntityRef<LevelExpression>);
			this._UserRegister = default(EntityRef<UserRegister>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserFCM")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserFCM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TokenID;
		
		private int _UID;
		
		private string _FCMToken;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTokenIDChanging(int value);
    partial void OnTokenIDChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnFCMTokenChanging(string value);
    partial void OnFCMTokenChanged();
    #endregion
		
		public UserFCM()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int TokenID
		{
			get
			{
				return this._TokenID;
			}
			set
			{
				if ((this._TokenID != value))
				{
					this.OnTokenIDChanging(value);
					this.SendPropertyChanging();
					this._TokenID = value;
					this.SendPropertyChanged("TokenID");
					this.OnTokenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FCMToken", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string FCMToken
		{
			get
			{
				return this._FCMToken;
			}
			set
			{
				if ((this._FCMToken != value))
				{
					this.OnFCMTokenChanging(value);
					this.SendPropertyChanging();
					this._FCMToken = value;
					this.SendPropertyChanged("FCMToken");
					this.OnFCMTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserFCM", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserFCM.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserFCM.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _UserName;
		
		private string _PID;
		
		private string _Password;
		
		private string _ExternalID;
		
		private System.Nullable<System.DateTime> _Expiration;
		
		private System.Nullable<int> _Creator;
		
		private System.Nullable<int> _AuthID;
		
		private System.Nullable<int> _LevelID;
		
		private string _ThemeName;
		
		private string _Password2;
		
		private string _MemberCode;
		
		private System.Nullable<int> _PictureID;
		
		private string _RealName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _RecentStatus;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<int> _SubscribedAlarm;
		
		private EntityRef<UserRegister> _UserRegister;
		
		private EntitySet<UserFCM> _UserFCM;
		
		private EntitySet<UserProfile> _UserProfile2;
		
		private EntitySet<UserProfile> _UserProfile4;
		
		private EntitySet<UserBinding> _UserBinding;
		
		private EntityRef<UserProfileExtension> _UserProfileExtension;
		
		private EntitySet<GasUsageReport> _GasUsageReport;
		
		private EntitySet<UserAccessCard> _UserAccessCard;
		
		private EntitySet<BoxStorageLog> _BoxStorageLog;
		
		private EntityRef<UserAlarm> _UserAlarm;
		
		private EntityRef<UserProfile> _UserProfile1;
		
		private EntityRef<UserProfile> _UserProfile3;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnExternalIDChanging(string value);
    partial void OnExternalIDChanged();
    partial void OnExpirationChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationChanged();
    partial void OnCreatorChanging(System.Nullable<int> value);
    partial void OnCreatorChanged();
    partial void OnAuthIDChanging(System.Nullable<int> value);
    partial void OnAuthIDChanged();
    partial void OnLevelIDChanging(System.Nullable<int> value);
    partial void OnLevelIDChanged();
    partial void OnThemeNameChanging(string value);
    partial void OnThemeNameChanged();
    partial void OnPassword2Changing(string value);
    partial void OnPassword2Changed();
    partial void OnMemberCodeChanging(string value);
    partial void OnMemberCodeChanged();
    partial void OnPictureIDChanging(System.Nullable<int> value);
    partial void OnPictureIDChanged();
    partial void OnRealNameChanging(string value);
    partial void OnRealNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnRecentStatusChanging(string value);
    partial void OnRecentStatusChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnSubscribedAlarmChanging(System.Nullable<int> value);
    partial void OnSubscribedAlarmChanged();
    #endregion
		
		public UserProfile()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(40)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalID", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string ExternalID
		{
			get
			{
				return this._ExternalID;
			}
			set
			{
				if ((this._ExternalID != value))
				{
					this.OnExternalIDChanging(value);
					this.SendPropertyChanging();
					this._ExternalID = value;
					this.SendPropertyChanged("ExternalID");
					this.OnExternalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiration", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> Expiration
		{
			get
			{
				return this._Expiration;
			}
			set
			{
				if ((this._Expiration != value))
				{
					this.OnExpirationChanging(value);
					this.SendPropertyChanging();
					this._Expiration = value;
					this.SendPropertyChanged("Expiration");
					this.OnExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<int> Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._UserProfile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Nullable<int> AuthID
		{
			get
			{
				return this._AuthID;
			}
			set
			{
				if ((this._AuthID != value))
				{
					if (this._UserProfile3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthIDChanging(value);
					this.SendPropertyChanging();
					this._AuthID = value;
					this.SendPropertyChanged("AuthID");
					this.OnAuthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public System.Nullable<int> LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeName", DbType="NVarChar(16)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public string ThemeName
		{
			get
			{
				return this._ThemeName;
			}
			set
			{
				if ((this._ThemeName != value))
				{
					this.OnThemeNameChanging(value);
					this.SendPropertyChanging();
					this._ThemeName = value;
					this.SendPropertyChanged("ThemeName");
					this.OnThemeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password2", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public string Password2
		{
			get
			{
				return this._Password2;
			}
			set
			{
				if ((this._Password2 != value))
				{
					this.OnPassword2Changing(value);
					this.SendPropertyChanging();
					this._Password2 = value;
					this.SendPropertyChanged("Password2");
					this.OnPassword2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberCode", DbType="NVarChar(16)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public string MemberCode
		{
			get
			{
				return this._MemberCode;
			}
			set
			{
				if ((this._MemberCode != value))
				{
					this.OnMemberCodeChanging(value);
					this.SendPropertyChanging();
					this._MemberCode = value;
					this.SendPropertyChanged("MemberCode");
					this.OnMemberCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13)]
		public System.Nullable<int> PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealName", DbType="NVarChar(40)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14)]
		public string RealName
		{
			get
			{
				return this._RealName;
			}
			set
			{
				if ((this._RealName != value))
				{
					this.OnRealNameChanging(value);
					this.SendPropertyChanging();
					this._RealName = value;
					this.SendPropertyChanged("RealName");
					this.OnRealNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(128)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(32)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecentStatus", DbType="NVarChar(MAX)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=17)]
		public string RecentStatus
		{
			get
			{
				return this._RecentStatus;
			}
			set
			{
				if ((this._RecentStatus != value))
				{
					this.OnRecentStatusChanging(value);
					this.SendPropertyChanging();
					this._RecentStatus = value;
					this.SendPropertyChanged("RecentStatus");
					this.OnRecentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=18)]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscribedAlarm", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=19)]
		public System.Nullable<int> SubscribedAlarm
		{
			get
			{
				return this._SubscribedAlarm;
			}
			set
			{
				if ((this._SubscribedAlarm != value))
				{
					this.OnSubscribedAlarmChanging(value);
					this.SendPropertyChanging();
					this._SubscribedAlarm = value;
					this.SendPropertyChanged("SubscribedAlarm");
					this.OnSubscribedAlarmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserRegister", Storage="_UserRegister", ThisKey="UID", OtherKey="UID", IsUnique=true, IsForeignKey=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=20, EmitDefaultValue=false)]
		public UserRegister UserRegister
		{
			get
			{
				if ((this.serializing 
							&& (this._UserRegister.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._UserRegister.Entity;
			}
			set
			{
				UserRegister previousValue = this._UserRegister.Entity;
				if (((previousValue != value) 
							|| (this._UserRegister.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegister.Entity = null;
						previousValue.UserProfile = null;
					}
					this._UserRegister.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("UserRegister");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserFCM", Storage="_UserFCM", ThisKey="UID", OtherKey="UID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=21, EmitDefaultValue=false)]
		public EntitySet<UserFCM> UserFCM
		{
			get
			{
				if ((this.serializing 
							&& (this._UserFCM.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserFCM;
			}
			set
			{
				this._UserFCM.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile", Storage="_UserProfile2", ThisKey="UID", OtherKey="Creator")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=22, EmitDefaultValue=false)]
		public EntitySet<UserProfile> UserProfile2
		{
			get
			{
				if ((this.serializing 
							&& (this._UserProfile2.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserProfile2;
			}
			set
			{
				this._UserProfile2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile1", Storage="_UserProfile4", ThisKey="UID", OtherKey="AuthID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=23, EmitDefaultValue=false)]
		public EntitySet<UserProfile> UserProfile4
		{
			get
			{
				if ((this.serializing 
							&& (this._UserProfile4.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserProfile4;
			}
			set
			{
				this._UserProfile4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserBinding", Storage="_UserBinding", ThisKey="UID", OtherKey="UID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=24, EmitDefaultValue=false)]
		public EntitySet<UserBinding> UserBinding
		{
			get
			{
				if ((this.serializing 
							&& (this._UserBinding.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserBinding;
			}
			set
			{
				this._UserBinding.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileExtension", Storage="_UserProfileExtension", ThisKey="UID", OtherKey="UID", IsUnique=true, IsForeignKey=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=25, EmitDefaultValue=false)]
		public UserProfileExtension UserProfileExtension
		{
			get
			{
				if ((this.serializing 
							&& (this._UserProfileExtension.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._UserProfileExtension.Entity;
			}
			set
			{
				UserProfileExtension previousValue = this._UserProfileExtension.Entity;
				if (((previousValue != value) 
							|| (this._UserProfileExtension.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfileExtension.Entity = null;
						previousValue.UserProfile = null;
					}
					this._UserProfileExtension.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("UserProfileExtension");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_GasUsageReport", Storage="_GasUsageReport", ThisKey="UID", OtherKey="UID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=26, EmitDefaultValue=false)]
		public EntitySet<GasUsageReport> GasUsageReport
		{
			get
			{
				if ((this.serializing 
							&& (this._GasUsageReport.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._GasUsageReport;
			}
			set
			{
				this._GasUsageReport.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserAccessCard", Storage="_UserAccessCard", ThisKey="UID", OtherKey="UID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=27, EmitDefaultValue=false)]
		public EntitySet<UserAccessCard> UserAccessCard
		{
			get
			{
				if ((this.serializing 
							&& (this._UserAccessCard.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserAccessCard;
			}
			set
			{
				this._UserAccessCard.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_BoxStorageLog", Storage="_BoxStorageLog", ThisKey="UID", OtherKey="UID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=28, EmitDefaultValue=false)]
		public EntitySet<BoxStorageLog> BoxStorageLog
		{
			get
			{
				if ((this.serializing 
							&& (this._BoxStorageLog.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BoxStorageLog;
			}
			set
			{
				this._BoxStorageLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserAlarm", Storage="_UserAlarm", ThisKey="UID", OtherKey="UID", IsUnique=true, IsForeignKey=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=29, EmitDefaultValue=false)]
		public UserAlarm UserAlarm
		{
			get
			{
				if ((this.serializing 
							&& (this._UserAlarm.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._UserAlarm.Entity;
			}
			set
			{
				UserAlarm previousValue = this._UserAlarm.Entity;
				if (((previousValue != value) 
							|| (this._UserAlarm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAlarm.Entity = null;
						previousValue.UserProfile = null;
					}
					this._UserAlarm.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("UserAlarm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile", Storage="_UserProfile1", ThisKey="Creator", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile1
		{
			get
			{
				return this._UserProfile1.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile1.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile1.Entity = null;
						previousValue.UserProfile2.Remove(this);
					}
					this._UserProfile1.Entity = value;
					if ((value != null))
					{
						value.UserProfile2.Add(this);
						this._Creator = value.UID;
					}
					else
					{
						this._Creator = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile1", Storage="_UserProfile3", ThisKey="AuthID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile3
		{
			get
			{
				return this._UserProfile3.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile3.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile3.Entity = null;
						previousValue.UserProfile4.Remove(this);
					}
					this._UserProfile3.Entity = value;
					if ((value != null))
					{
						value.UserProfile4.Add(this);
						this._AuthID = value.UID;
					}
					else
					{
						this._AuthID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFCM(UserFCM entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserFCM(UserFCM entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserProfile2(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = this;
		}
		
		private void detach_UserProfile2(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = null;
		}
		
		private void attach_UserProfile4(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile3 = this;
		}
		
		private void detach_UserProfile4(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile3 = null;
		}
		
		private void attach_UserBinding(UserBinding entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserBinding(UserBinding entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_GasUsageReport(GasUsageReport entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_GasUsageReport(GasUsageReport entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserAccessCard(UserAccessCard entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserAccessCard(UserAccessCard entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_BoxStorageLog(BoxStorageLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_BoxStorageLog(BoxStorageLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void Initialize()
		{
			this._UserRegister = default(EntityRef<UserRegister>);
			this._UserFCM = new EntitySet<UserFCM>(new Action<UserFCM>(this.attach_UserFCM), new Action<UserFCM>(this.detach_UserFCM));
			this._UserProfile2 = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile2), new Action<UserProfile>(this.detach_UserProfile2));
			this._UserProfile4 = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile4), new Action<UserProfile>(this.detach_UserProfile4));
			this._UserBinding = new EntitySet<UserBinding>(new Action<UserBinding>(this.attach_UserBinding), new Action<UserBinding>(this.detach_UserBinding));
			this._UserProfileExtension = default(EntityRef<UserProfileExtension>);
			this._GasUsageReport = new EntitySet<GasUsageReport>(new Action<GasUsageReport>(this.attach_GasUsageReport), new Action<GasUsageReport>(this.detach_GasUsageReport));
			this._UserAccessCard = new EntitySet<UserAccessCard>(new Action<UserAccessCard>(this.attach_UserAccessCard), new Action<UserAccessCard>(this.detach_UserAccessCard));
			this._BoxStorageLog = new EntitySet<BoxStorageLog>(new Action<BoxStorageLog>(this.attach_BoxStorageLog), new Action<BoxStorageLog>(this.detach_BoxStorageLog));
			this._UserAlarm = default(EntityRef<UserAlarm>);
			this._UserProfile1 = default(EntityRef<UserProfile>);
			this._UserProfile3 = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserBinding")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserBinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BindingID;
		
		private int _UID;
		
		private string _LineID;
		
		private string _LineUser;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBindingIDChanging(int value);
    partial void OnBindingIDChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnLineIDChanging(string value);
    partial void OnLineIDChanged();
    partial void OnLineUserChanging(string value);
    partial void OnLineUserChanged();
    #endregion
		
		public UserBinding()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BindingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int BindingID
		{
			get
			{
				return this._BindingID;
			}
			set
			{
				if ((this._BindingID != value))
				{
					this.OnBindingIDChanging(value);
					this.SendPropertyChanging();
					this._BindingID = value;
					this.SendPropertyChanged("BindingID");
					this.OnBindingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineUser", DbType="NVarChar(40)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string LineUser
		{
			get
			{
				return this._LineUser;
			}
			set
			{
				if ((this._LineUser != value))
				{
					this.OnLineUserChanging(value);
					this.SendPropertyChanging();
					this._LineUser = value;
					this.SendPropertyChanged("LineUser");
					this.OnLineUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserBinding", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserBinding.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserBinding.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Community")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Community : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommunityID;
		
		private string _CommunityNo;
		
		private string _CommunityName;
		
		private EntitySet<UserProfileExtension> _UserProfileExtension;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommunityIDChanging(int value);
    partial void OnCommunityIDChanged();
    partial void OnCommunityNoChanging(string value);
    partial void OnCommunityNoChanged();
    partial void OnCommunityNameChanging(string value);
    partial void OnCommunityNameChanged();
    #endregion
		
		public Community()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int CommunityID
		{
			get
			{
				return this._CommunityID;
			}
			set
			{
				if ((this._CommunityID != value))
				{
					this.OnCommunityIDChanging(value);
					this.SendPropertyChanging();
					this._CommunityID = value;
					this.SendPropertyChanged("CommunityID");
					this.OnCommunityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityNo", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string CommunityNo
		{
			get
			{
				return this._CommunityNo;
			}
			set
			{
				if ((this._CommunityNo != value))
				{
					this.OnCommunityNoChanging(value);
					this.SendPropertyChanging();
					this._CommunityNo = value;
					this.SendPropertyChanged("CommunityNo");
					this.OnCommunityNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string CommunityName
		{
			get
			{
				return this._CommunityName;
			}
			set
			{
				if ((this._CommunityName != value))
				{
					this.OnCommunityNameChanging(value);
					this.SendPropertyChanging();
					this._CommunityName = value;
					this.SendPropertyChanged("CommunityName");
					this.OnCommunityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Community_UserProfileExtension", Storage="_UserProfileExtension", ThisKey="CommunityID", OtherKey="CommunityID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<UserProfileExtension> UserProfileExtension
		{
			get
			{
				if ((this.serializing 
							&& (this._UserProfileExtension.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserProfileExtension;
			}
			set
			{
				this._UserProfileExtension.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProfileExtension(UserProfileExtension entity)
		{
			this.SendPropertyChanging();
			entity.Community = this;
		}
		
		private void detach_UserProfileExtension(UserProfileExtension entity)
		{
			this.SendPropertyChanging();
			entity.Community = null;
		}
		
		private void Initialize()
		{
			this._UserProfileExtension = new EntitySet<UserProfileExtension>(new Action<UserProfileExtension>(this.attach_UserProfileExtension), new Action<UserProfileExtension>(this.detach_UserProfileExtension));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfileExtension")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserProfileExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _LineID;
		
		private string _InstanceID;
		
		private System.Nullable<int> _CommunityID;
		
		private System.Nullable<int> _DefenceStatus;
		
		private string _PowerMeterIP;
		
		private System.Nullable<int> _Floor;
		
		private EntityRef<Community> _Community;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnLineIDChanging(string value);
    partial void OnLineIDChanged();
    partial void OnInstanceIDChanging(string value);
    partial void OnInstanceIDChanged();
    partial void OnCommunityIDChanging(System.Nullable<int> value);
    partial void OnCommunityIDChanged();
    partial void OnDefenceStatusChanging(System.Nullable<int> value);
    partial void OnDefenceStatusChanged();
    partial void OnPowerMeterIPChanging(string value);
    partial void OnPowerMeterIPChanged();
    partial void OnFloorChanging(System.Nullable<int> value);
    partial void OnFloorChanged();
    #endregion
		
		public UserProfileExtension()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstanceID", DbType="NVarChar(64)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunityID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> CommunityID
		{
			get
			{
				return this._CommunityID;
			}
			set
			{
				if ((this._CommunityID != value))
				{
					if (this._Community.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommunityIDChanging(value);
					this.SendPropertyChanging();
					this._CommunityID = value;
					this.SendPropertyChanged("CommunityID");
					this.OnCommunityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefenceStatus", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<int> DefenceStatus
		{
			get
			{
				return this._DefenceStatus;
			}
			set
			{
				if ((this._DefenceStatus != value))
				{
					this.OnDefenceStatusChanging(value);
					this.SendPropertyChanging();
					this._DefenceStatus = value;
					this.SendPropertyChanged("DefenceStatus");
					this.OnDefenceStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerMeterIP", DbType="NVarChar(16)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string PowerMeterIP
		{
			get
			{
				return this._PowerMeterIP;
			}
			set
			{
				if ((this._PowerMeterIP != value))
				{
					this.OnPowerMeterIPChanging(value);
					this.SendPropertyChanging();
					this._PowerMeterIP = value;
					this.SendPropertyChanged("PowerMeterIP");
					this.OnPowerMeterIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<int> Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Community_UserProfileExtension", Storage="_Community", ThisKey="CommunityID", OtherKey="CommunityID", IsForeignKey=true)]
		public Community Community
		{
			get
			{
				return this._Community.Entity;
			}
			set
			{
				Community previousValue = this._Community.Entity;
				if (((previousValue != value) 
							|| (this._Community.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Community.Entity = null;
						previousValue.UserProfileExtension.Remove(this);
					}
					this._Community.Entity = value;
					if ((value != null))
					{
						value.UserProfileExtension.Add(this);
						this._CommunityID = value.CommunityID;
					}
					else
					{
						this._CommunityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Community");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileExtension", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserProfileExtension = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserProfileExtension = this;
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Community = default(EntityRef<Community>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageBoard")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class MessageBoard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _InstanceID;
		
		private System.DateTime _MessageDate;
		
		private System.Nullable<int> _Defence;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIDChanging(string value);
    partial void OnInstanceIDChanged();
    partial void OnMessageDateChanging(System.DateTime value);
    partial void OnMessageDateChanged();
    partial void OnDefenceChanging(System.Nullable<int> value);
    partial void OnDefenceChanged();
    #endregion
		
		public MessageBoard()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstanceID", DbType="NVarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageDate", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.DateTime MessageDate
		{
			get
			{
				return this._MessageDate;
			}
			set
			{
				if ((this._MessageDate != value))
				{
					this.OnMessageDateChanging(value);
					this.SendPropertyChanging();
					this._MessageDate = value;
					this.SendPropertyChanged("MessageDate");
					this.OnMessageDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defence", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Nullable<int> Defence
		{
			get
			{
				return this._Defence;
			}
			set
			{
				if ((this._Defence != value))
				{
					this.OnDefenceChanging(value);
					this.SendPropertyChanging();
					this._Defence = value;
					this.SendPropertyChanged("Defence");
					this.OnDefenceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GasUsageReport")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class GasUsageReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportID;
		
		private int _UID;
		
		private System.Nullable<System.DateTime> _ReportDate;
		
		private int _Year;
		
		private int _Month;
		
		private decimal _Usage;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnReportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReportDateChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnUsageChanging(decimal value);
    partial void OnUsageChanged();
    #endregion
		
		public GasUsageReport()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Nullable<System.DateTime> ReportDate
		{
			get
			{
				return this._ReportDate;
			}
			set
			{
				if ((this._ReportDate != value))
				{
					this.OnReportDateChanging(value);
					this.SendPropertyChanging();
					this._ReportDate = value;
					this.SendPropertyChanged("ReportDate");
					this.OnReportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public int Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usage", DbType="Decimal(18,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public decimal Usage
		{
			get
			{
				return this._Usage;
			}
			set
			{
				if ((this._Usage != value))
				{
					this.OnUsageChanging(value);
					this.SendPropertyChanging();
					this._Usage = value;
					this.SendPropertyChanged("Usage");
					this.OnUsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_GasUsageReport", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.GasUsageReport.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.GasUsageReport.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FCMToken")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class FCMToken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Token;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    #endregion
		
		public FCMToken()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccessCard")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserAccessCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _CardID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnCardIDChanging(string value);
    partial void OnCardIDChanged();
    #endregion
		
		public UserAccessCard()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", DbType="NVarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserAccessCard", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserAccessCard.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserAccessCard.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoxStorageLog")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class BoxStorageLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private System.Nullable<int> _UID;
		
		private System.Nullable<int> _BoxSize;
		
		private System.Nullable<int> _BoxPort;
		
		private System.Nullable<System.DateTime> _PushDate;
		
		private System.Nullable<System.DateTime> _PopDate;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnBoxSizeChanging(System.Nullable<int> value);
    partial void OnBoxSizeChanged();
    partial void OnBoxPortChanging(System.Nullable<int> value);
    partial void OnBoxPortChanged();
    partial void OnPushDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPushDateChanged();
    partial void OnPopDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPopDateChanged();
    #endregion
		
		public BoxStorageLog()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxSize", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Nullable<int> BoxSize
		{
			get
			{
				return this._BoxSize;
			}
			set
			{
				if ((this._BoxSize != value))
				{
					this.OnBoxSizeChanging(value);
					this.SendPropertyChanging();
					this._BoxSize = value;
					this.SendPropertyChanged("BoxSize");
					this.OnBoxSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxPort", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> BoxPort
		{
			get
			{
				return this._BoxPort;
			}
			set
			{
				if ((this._BoxPort != value))
				{
					this.OnBoxPortChanging(value);
					this.SendPropertyChanging();
					this._BoxPort = value;
					this.SendPropertyChanged("BoxPort");
					this.OnBoxPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PushDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<System.DateTime> PushDate
		{
			get
			{
				return this._PushDate;
			}
			set
			{
				if ((this._PushDate != value))
				{
					this.OnPushDateChanging(value);
					this.SendPropertyChanging();
					this._PushDate = value;
					this.SendPropertyChanged("PushDate");
					this.OnPushDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> PopDate
		{
			get
			{
				return this._PopDate;
			}
			set
			{
				if ((this._PopDate != value))
				{
					this.OnPopDateChanging(value);
					this.SendPropertyChanging();
					this._PopDate = value;
					this.SendPropertyChanged("PopDate");
					this.OnPopDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_BoxStorageLog", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.BoxStorageLog.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.BoxStorageLog.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAlarm")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserAlarm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private System.Nullable<int> _AlarmID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnAlarmIDChanging(System.Nullable<int> value);
    partial void OnAlarmIDChanged();
    #endregion
		
		public UserAlarm()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Nullable<int> AlarmID
		{
			get
			{
				return this._AlarmID;
			}
			set
			{
				if ((this._AlarmID != value))
				{
					this.OnAlarmIDChanging(value);
					this.SendPropertyChanging();
					this._AlarmID = value;
					this.SendPropertyChanged("AlarmID");
					this.OnAlarmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserAlarm", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserAlarm = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserAlarm = this;
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
